{
  "$defs": {
    "source": {
      "anyOf": [
        {
          "$ref": "#/$defs/source__lever.jobs"
        }
      ],
      "properties": {
        "params": {
          "type": "object"
        },
        "type": {
          "enum": [
            "lever.jobs"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "source__lever.jobs": {
      "etl-name": "Lever",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "base_url": {
              "type": "string"
            },
            "max_objects_per_page": {
              "type": "integer"
            },
            "query_string": {
              "type": "string"
            },
            "site": {
              "type": "string"
            }
          },
          "required": [
            "base_url",
            "site"
          ]
        },
        "type": {
          "enum": [
            "lever.jobs"
          ],
          "type": "string"
        }
      }
    },
    "target": {
      "anyOf": [
        {
          "$ref": "#/$defs/target__welcome_jobs.jobs"
        }
      ],
      "properties": {
        "params": {
          "type": "object"
        },
        "type": {
          "enum": [
            "welcome_jobs.jobs"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "target__welcome_jobs.jobs": {
      "etl-name": "WelcomeJobs",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "host": {
              "description": "The Host for Welcome Jobs. The `WELCOME_JOBS_HOST` environment variable will be used if not provided.",
              "type": [
                "null",
                "string"
              ]
            },
            "orga_wa_reference": {
              "description": "The Welcome Accounts UUID for the organization.",
              "type": "string"
            }
          },
          "required": [
            "orga_wa_reference"
          ]
        },
        "type": {
          "enum": [
            "welcome_jobs.jobs"
          ],
          "type": "string"
        }
      }
    },
    "transform_function": {
      "anyOf": [
        {
          "$ref": "#/$defs/transform_function__core.foreach"
        },
        {
          "$ref": "#/$defs/transform_function__core.key_equals"
        },
        {
          "$ref": "#/$defs/transform_function__mapping.search_replace"
        },
        {
          "$ref": "#/$defs/transform_function__render.mustache"
        },
        {
          "$ref": "#/$defs/transform_function__string.append_key"
        },
        {
          "$ref": "#/$defs/transform_function__string.clean_html"
        }
      ],
      "properties": {
        "params": {
          "type": "object"
        },
        "type": {
          "enum": [
            "core.foreach",
            "core.key_equals",
            "mapping.search_replace",
            "render.mustache",
            "string.append_key",
            "string.clean_html"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "transform_function__core.foreach": {
      "description": "This function allows to apply other functions to each item of an input\ncollection.\n",
      "etl-name": "Foreach",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "transformers": {
              "description": "A block of transform functions to apply to each item of the input list.",
              "items": {
                "$ref": "#/$defs/transform_function"
              },
              "type": "array"
            }
          },
          "required": [
            "transformers"
          ]
        },
        "type": {
          "enum": [
            "core.foreach"
          ],
          "type": "string"
        }
      }
    },
    "transform_function__core.key_equals": {
      "description": "Returns `true` if the value associated to the `key` in the input object is\nequal to the given `value`.\n\nIf the value is a number, it will be converted to a string before being\ncompared. Note that there should be no extra digits when comparing floats. For\ninstance, if the source data contains `1.5` and the `value` param is `\"1.50\"`\nthere will be no match. The `value` param should be `\"1.5\"`\n",
      "etl-name": "KeyEquals",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "key",
            "value"
          ]
        },
        "type": {
          "enum": [
            "core.key_equals"
          ],
          "type": "string"
        }
      }
    },
    "transform_function__mapping.search_replace": {
      "description": "Uses a mapping to search for substrings in the input value and replace those\nwith their mapped value.\n\nAll source values defined in the mapping will be looked for in the input value\nand replaced with their mapped translation.\n",
      "etl-name": "MappedSearchReplace",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "mapping_group_id": {
              "description": "The mapping group id to use for the mapping.",
              "etl-meta": {
                "is_mapping": "true"
              },
              "format": "uuid",
              "type": "string"
            }
          },
          "required": [
            "mapping_group_id"
          ]
        },
        "type": {
          "enum": [
            "mapping.search_replace"
          ],
          "type": "string"
        }
      }
    },
    "transform_function__render.mustache": {
      "etl-name": "RenderMustache",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "template": {
              "type": "string"
            }
          },
          "required": [
            "template"
          ]
        },
        "type": {
          "enum": [
            "render.mustache"
          ],
          "type": "string"
        }
      }
    },
    "transform_function__string.append_key": {
      "description": "Appends the value identified by `key` to the given input, concatenated by the\n`glue`.\n\n* If the given input is `nil`, then the object value is returned, without the\n  glue.\n* If the `key` is not defined in the object, or contains an empty value (`nil`\n  or a blank string) then the input value is returned, without the glue.\n* If both are `nil`, an empty string is returned.\n",
      "etl-name": "AppendKey",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "glue": {
              "description": "The string used to glue the input on the left and the object key value on\nthe right.\n\nNote that is string is parsed for special characters, so giving `\\n` will\nbe interpreted as a newline.\n",
              "type": "string"
            },
            "key": {
              "description": "The key of the object whose value will be appended.\n",
              "type": "string"
            }
          },
          "required": [
            "key"
          ]
        },
        "type": {
          "enum": [
            "string.append_key"
          ],
          "type": "string"
        }
      }
    },
    "transform_function__string.clean_html": {
      "etl-name": "CleanHtml",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "allow_tags": {
              "description": "HTML tags to keep.\n\nIf empty, all tags are allowed, except those defined in `reject_tags`.\nIf not empty, the `reject_tags` parameter is ignored.\n",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "reject_tags": {
              "description": "HTML tags to remove. The content of the tags will be lifted up in the parent scope.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "strip_attributes": {
              "description": "Remove all attributes from all tags.",
              "type": "boolean"
            }
          },
          "required": []
        },
        "type": {
          "enum": [
            "string.clean_html"
          ],
          "type": "string"
        }
      }
    },
    "transform_step": {
      "anyOf": [
        {
          "$ref": "#/$defs/transform_step__core.delete_keys"
        },
        {
          "$ref": "#/$defs/transform_step__core.exclude_object"
        },
        {
          "$ref": "#/$defs/transform_step__core.filter_object"
        },
        {
          "$ref": "#/$defs/transform_step__core.generate_key"
        },
        {
          "$ref": "#/$defs/transform_step__core.rename_key"
        },
        {
          "$ref": "#/$defs/transform_step__core.set_key"
        },
        {
          "$ref": "#/$defs/transform_step__core.transform_key"
        },
        {
          "$ref": "#/$defs/transform_step__mapping.map_key"
        }
      ],
      "properties": {
        "params": {
          "type": "object"
        },
        "type": {
          "enum": [
            "core.delete_keys",
            "core.exclude_object",
            "core.filter_object",
            "core.generate_key",
            "core.rename_key",
            "core.set_key",
            "core.transform_key",
            "mapping.map_key"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "transform_step__core.delete_keys": {
      "etl-name": "DeleteKeys",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "keys": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "keys"
          ]
        },
        "type": {
          "enum": [
            "core.delete_keys"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__core.exclude_object": {
      "etl-name": "ExcludeObject",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "predicates": {
              "items": {
                "$ref": "#/$defs/transform_function"
              },
              "type": "array"
            }
          },
          "required": [
            "predicates"
          ]
        },
        "type": {
          "enum": [
            "core.exclude_object"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__core.filter_object": {
      "etl-name": "FilterObject",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "exclude_matches": {
              "type": "boolean"
            },
            "match_all": {
              "type": "boolean"
            },
            "predicates": {
              "items": {
                "$ref": "#/$defs/transform_function"
              },
              "type": "array"
            }
          },
          "required": [
            "exclude_matches",
            "match_all",
            "predicates"
          ]
        },
        "type": {
          "enum": [
            "core.filter_object"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__core.generate_key": {
      "etl-name": "GenerateKey",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "generator": {
              "$ref": "#/$defs/transform_function"
            },
            "output_key": {
              "type": "string"
            },
            "transformers": {
              "items": {
                "$ref": "#/$defs/transform_function"
              },
              "type": "array"
            }
          },
          "required": [
            "generator",
            "output_key"
          ]
        },
        "type": {
          "enum": [
            "core.generate_key"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__core.rename_key": {
      "etl-name": "RenameKey",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "from_name": {
              "type": "string"
            },
            "to_name": {
              "type": "string"
            }
          },
          "required": [
            "from_name",
            "to_name"
          ]
        },
        "type": {
          "enum": [
            "core.rename_key"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__core.set_key": {
      "etl-name": "SetKey",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "key",
            "value"
          ]
        },
        "type": {
          "enum": [
            "core.set_key"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__core.transform_key": {
      "description": "Takes a value from the object data and applies a sequence of transformers to\nit. The result is stored in the object data under the given output key.\n\nThis step does not delete the input key from the object data, but it will\noverride it if the output and input keys are the same.\n",
      "etl-name": "TransformKey",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "input_key": {
              "type": "string"
            },
            "output_key": {
              "type": "string"
            },
            "transformers": {
              "items": {
                "$ref": "#/$defs/transform_function"
              },
              "type": "array"
            }
          },
          "required": [
            "input_key",
            "output_key",
            "transformers"
          ]
        },
        "type": {
          "enum": [
            "core.transform_key"
          ],
          "type": "string"
        }
      }
    },
    "transform_step__mapping.map_key": {
      "description": "Uses the mapping system to translate the value of one key and put the result\nin the same or another key.\n",
      "etl-name": "MapKey",
      "properties": {
        "params": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "input_key": {
              "description": "The key in the source data to map from",
              "type": "string"
            },
            "mapping_group_id": {
              "description": "The mapping group id to use for the mapping.",
              "etl-meta": {
                "is_mapping": "true"
              },
              "format": "uuid",
              "type": "string"
            },
            "output_key": {
              "description": "The key to set with the mapped value. It can be the same as the input key.",
              "type": "string"
            }
          },
          "required": [
            "input_key",
            "mapping_group_id",
            "output_key"
          ]
        },
        "type": {
          "enum": [
            "mapping.map_key"
          ],
          "type": "string"
        }
      }
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "source": {
      "$ref": "#/$defs/source",
      "type": "object"
    },
    "target": {
      "$ref": "#/$defs/target",
      "type": "object"
    },
    "transform": {
      "items": {
        "$ref": "#/$defs/transform_step"
      },
      "type": "array"
    }
  },
  "required": [
    "source",
    "transform",
    "target"
  ]
}
